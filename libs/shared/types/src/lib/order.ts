// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v3.20.3
// source: order.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "order";

export interface OrderItem {
  skuId: string;
  skuCode: string;
  quantity: number;
  price: number;
  productId: string;
  productName: string;
  productImage: string;
}

export interface CreateOrderRequest {
  userId: string;
  receiverName: string;
  receiverPhone: string;
  address: string;
  ward: string;
  district: string;
  city: string;
  paymentMethod: 'cod' | 'momo';
  shippingFee: number;
  discount?: number;
  note?: string;
  items: OrderItem[];
}

export interface GetOrderByIdRequest {
  orderId: string;
}

export interface ListOrdersByUserRequest {
  userId: string;
}

export interface OrderDetail {
  id: string;
  skuId: string;
  skuCode: string;
  quantity: number;
  price: number;
  totalPrice: number;
  productId: string;
  productName: string;
  productImage: string;
}

export interface OrderResponse {
  id: string;
  userId: string;
  code: string;
  status: string;
  totalAmount: number;
  paymentMethod: string;
  paymentStatus: string;
  shippingFee: number;
  discount: number;
  note: string;
  receiverName: string;
  receiverPhone: string;
  address: string;
  ward: string;
  district: string;
  city: string;
  orderDetails: OrderDetail[];
  createdAt: string;
  updatedAt: string;
}

export interface OrderListResponse {
  orders: OrderResponse[];
}

export const ORDER_PACKAGE_NAME = "order";

export interface OrderServiceClient {
  createOrder(request: CreateOrderRequest): Observable<OrderResponse>;

  getOrderById(request: GetOrderByIdRequest): Observable<OrderResponse>;

  listOrdersByUser(request: ListOrdersByUserRequest): Observable<OrderListResponse>;
}

export interface OrderServiceController {
  createOrder(request: CreateOrderRequest): Promise<OrderResponse> | Observable<OrderResponse> | OrderResponse;

  getOrderById(request: GetOrderByIdRequest): Promise<OrderResponse> | Observable<OrderResponse> | OrderResponse;

  listOrdersByUser(
    request: ListOrdersByUserRequest,
  ): Promise<OrderListResponse> | Observable<OrderListResponse> | OrderListResponse;
}

export function OrderServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createOrder", "getOrderById", "listOrdersByUser"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("OrderService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("OrderService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ORDER_SERVICE_NAME = "OrderService";
