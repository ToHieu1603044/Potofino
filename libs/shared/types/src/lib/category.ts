// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v3.20.3
// source: category.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "../../google/protobuf/empty";

export const protobufPackage = "category";

export interface Category {
  id: string;
  name: string;
  slug: string;
  image: string;
  active: boolean;
  parentId: string;
  /** ISO date string (nullable) */
  deletedAt: string;
  /** ƒê·ªá quy c√¢y danh m·ª•c */
  children: Category[];
}

export interface CreateCategoryRequest {
  name: string;
  slug: string;
  image: string;
  active: boolean;
  parentId: string;
}

export interface UpdateCategoryRequest {
  id: string;
  name: string;
  slug: string;
  image: string;
  active: boolean;
  parentId: string;
}

export interface DeleteCategoryRequest {
  id: string;
}

export interface GetCategoryRequest {
  id: string;
}

export interface ListCategoriesRequest {
  keyword: string;
  active: boolean;
  page: number;
  limit: number;
}

export interface CategoryResponse {
  category: Category | undefined;
}

export interface CategoryListResponse {
  categories: Category[];
  total: number;
}

export interface CategoryTreeResponse {
  /** Root categories c√≥ children */
  categories: Category[];
}

export const CATEGORY_PACKAGE_NAME = "category";

export interface CategoryServiceClient {
  createCategory(request: CreateCategoryRequest): Observable<CategoryResponse>;

  updateCategory(request: UpdateCategoryRequest): Observable<CategoryResponse>;

  deleteCategory(request: DeleteCategoryRequest): Observable<CategoryResponse>;

  getCategory(request: GetCategoryRequest): Observable<CategoryResponse>;

  listCategories(request: ListCategoriesRequest): Observable<CategoryListResponse>;

  /** üÜï Tr·∫£ v·ªÅ c√¢y danh m·ª•c */

  getCategoryTree(request: Empty): Observable<CategoryTreeResponse>;
}

export interface CategoryServiceController {
  createCategory(
    request: CreateCategoryRequest,
  ): Promise<CategoryResponse> | Observable<CategoryResponse> | CategoryResponse;

  updateCategory(
    request: UpdateCategoryRequest,
  ): Promise<CategoryResponse> | Observable<CategoryResponse> | CategoryResponse;

  deleteCategory(
    request: DeleteCategoryRequest,
  ): Promise<CategoryResponse> | Observable<CategoryResponse> | CategoryResponse;

  getCategory(request: GetCategoryRequest): Promise<CategoryResponse> | Observable<CategoryResponse> | CategoryResponse;

  listCategories(
    request: ListCategoriesRequest,
  ): Promise<CategoryListResponse> | Observable<CategoryListResponse> | CategoryListResponse;

  /** üÜï Tr·∫£ v·ªÅ c√¢y danh m·ª•c */

  getCategoryTree(
    request: Empty,
  ): Promise<CategoryTreeResponse> | Observable<CategoryTreeResponse> | CategoryTreeResponse;
}

export function CategoryServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createCategory",
      "updateCategory",
      "deleteCategory",
      "getCategory",
      "listCategories",
      "getCategoryTree",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("CategoryService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("CategoryService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CATEGORY_SERVICE_NAME = "CategoryService";
