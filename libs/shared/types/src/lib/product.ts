// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v3.20.3
// source: product.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "product";

export interface CreateProductRequest {
  name: string;
  description: string;
  brandId: string;
  categoryId: string;
  skus: CreateSkuInput[];
}

export interface CreateSkuInput {
  skuCode: string;
  price: number;
  stock: number;
  attributes: AttributeInput[];
}

export interface CreateProductResponse {
  id: string;
  name: string;
}

export interface GetProductRequest {
  id: string;
}

export interface GetProductResponse {
  id: string;
  name: string;
  description: string;
  brandId: string;
  categoryId: string;
  skus: SkuResponse[];
}

export interface GetAllProductsRequest {
  page: number;
  limit: number;
  keyword: string;
  brandId: string;
  categoryId: string;
  sort: string;
}

export interface GetAllProductsResponse {
  products: GetProductResponse[];
  total: number;
  page: number;
  limit: number;
  totalPages: number;
}

export interface SkuResponse {
  id: string;
  skuCode: string;
  price: number;
  stock: number;
  skuOptions: SkuOptionResponse[];
}

export interface AttributeInput {
  attributeOptionId: string;
}

export interface SkuOptionResponse {
  attributeOptionId: string;
  attributeOptionValue: string;
  attribute: AttributeDetail | undefined;
}

export interface AttributeDetail {
  id: string;
  name: string;
  description: string;
}

export interface SkuValidationInput {
  skuId: string;
  skuCode: string;
  productId: string;
}

export interface ValidateSkuInputRequest {
  items: SkuValidationInput[];
}

export interface ValidateSkuInputResponse {
  valid: boolean;
  invalidSkuCodes: string[];
}

export const PRODUCT_PACKAGE_NAME = "product";

export interface ProductServiceClient {
  createProduct(request: CreateProductRequest): Observable<CreateProductResponse>;

  getProduct(request: GetProductRequest): Observable<GetProductResponse>;

  getProducts(request: GetAllProductsRequest): Observable<GetAllProductsResponse>;

  validateSkuInputs(request: ValidateSkuInputRequest): Observable<ValidateSkuInputResponse>;
}

export interface ProductServiceController {
  createProduct(
    request: CreateProductRequest,
  ): Promise<CreateProductResponse> | Observable<CreateProductResponse> | CreateProductResponse;

  getProduct(
    request: GetProductRequest,
  ): Promise<GetProductResponse> | Observable<GetProductResponse> | GetProductResponse;

  getProducts(
    request: GetAllProductsRequest,
  ): Promise<GetAllProductsResponse> | Observable<GetAllProductsResponse> | GetAllProductsResponse;

  validateSkuInputs(
    request: ValidateSkuInputRequest,
  ): Promise<ValidateSkuInputResponse> | Observable<ValidateSkuInputResponse> | ValidateSkuInputResponse;
}

export function ProductServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createProduct", "getProduct", "getProducts", "validateSkuInputs"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ProductService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ProductService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PRODUCT_SERVICE_NAME = "ProductService";
