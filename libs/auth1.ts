// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v3.20.3
// source: auth1.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "auth1";

export interface TokenPair {
  accessToken: string;
  refreshToken: string;
}

export interface CommonResponse {
  success: boolean;
  message: string;
  errorCode?: string | undefined;
}

export interface LoginRequest {
  email: string;
  password: string;
  metadata: { [key: string]: string };
}

export interface LoginRequest_MetadataEntry {
  key: string;
  value: string;
}

export interface LoginResponse {
  status: CommonResponse | undefined;
  tokens: TokenPair | undefined;
  user: User | undefined;
}

export interface RefreshTokenRequest {
  refreshToken: string;
}

export interface RefreshTokenResponse {
  status: CommonResponse | undefined;
  tokens: TokenPair | undefined;
}

export interface ValidateTokenRequest {
  token: string;
}

export interface ValidateTokenResponse {
  valid: boolean;
  userId: string;
  message: string;
  user: User | undefined;
}

export interface LogoutRequest {
  userId: string;
  token: string;
}

export interface LogoutResponse {
  status: CommonResponse | undefined;
}

export interface CreateUserRequest {
  email: string;
  username: string;
  password: string;
  roleIds: string[];
}

export interface CreateUserResponse {
  status: CommonResponse | undefined;
  user: User | undefined;
}

export interface GetUserRequest {
  userId: string;
}

export interface GetUserResponse {
  status: CommonResponse | undefined;
  user: User | undefined;
}

export interface UpdateUserRequest {
  userId: string;
  email?: string | undefined;
  username?: string | undefined;
  isActive?: boolean | undefined;
  updatedBy?: string | undefined;
}

export interface UpdateUserResponse {
  status: CommonResponse | undefined;
  user: User | undefined;
}

export interface DeleteUserRequest {
  userId: string;
}

export interface DeleteUserResponse {
  status: CommonResponse | undefined;
}

export interface ListUsersRequest {
  page?: number | undefined;
  limit?: number | undefined;
  keyword?: string | undefined;
}

export interface ListUsersResponse {
  status: CommonResponse | undefined;
  users: User[];
  total: number;
}

export interface CreateRoleRequest {
  name: string;
  description?: string | undefined;
  permissionIds: string[];
  createdBy: string;
}

export interface CreateRoleResponse {
  status: CommonResponse | undefined;
  role: Role | undefined;
}

export interface ListRolesRequest {
  page?: number | undefined;
  limit?: number | undefined;
  keyword?: string | undefined;
  sortBy?: string | undefined;
  order?: string | undefined;
}

export interface ListRolesResponse {
  status: CommonResponse | undefined;
  roles: Role[];
  total: number;
}

export interface UpdateRoleRequest {
  roleId: string;
  name?: string | undefined;
  description?: string | undefined;
  isActive?: boolean | undefined;
  updatedBy?: string | undefined;
}

export interface UpdateRoleResponse {
  status: CommonResponse | undefined;
  role: Role | undefined;
}

export interface DeleteRoleRequest {
  roleId: string;
}

export interface DeleteRoleResponse {
  status: CommonResponse | undefined;
}

export interface ListPermissionsRequest {
  resource?: string | undefined;
}

export interface ListPermissionsResponse {
  status: CommonResponse | undefined;
  permissions: Permission[];
}

export interface AddUserRoleRequest {
  userId: string;
  roleId: string;
  assignedBy: string;
}

export interface AddUserRoleResponse {
  status: CommonResponse | undefined;
}

export interface RemoveUserRoleRequest {
  userId: string;
  roleId: string;
}

export interface RemoveUserRoleResponse {
  status: CommonResponse | undefined;
}

export interface AddUserPermissionRequest {
  userId: string;
  permissionId: string;
  assignedBy: string;
}

export interface AddUserPermissionResponse {
  status: CommonResponse | undefined;
}

export interface RemoveUserPermissionRequest {
  userId: string;
  permissionId: string;
}

export interface RemoveUserPermissionResponse {
  status: CommonResponse | undefined;
}

export interface CheckPermissionRequest {
  userId: string;
  resource: string;
  action: string;
}

export interface CheckPermissionResponse {
  hasPermission: boolean;
  message: string;
}

export interface GetUserPermissionsRequest {
  userId: string;
}

export interface GetUserPermissionsResponse {
  status: CommonResponse | undefined;
  permissions: string[];
}

export interface GetUserRolesRequest {
  userId: string;
}

export interface GetUserRolesResponse {
  status: CommonResponse | undefined;
  roles: Role[];
}

export interface User {
  id: string;
  email: string;
  username: string;
  isActive: boolean;
  createdAt: Timestamp | undefined;
  updatedAt: Timestamp | undefined;
  roles: Role[];
  permissions: Permission[];
}

export interface Role {
  id: string;
  name: string;
  description?: string | undefined;
  isActive: boolean;
  createdAt: Timestamp | undefined;
  updatedAt: Timestamp | undefined;
  permissions: Permission[];
}

export interface Permission {
  id: string;
  name: string;
  resource: string;
  action: string;
  description?: string | undefined;
  createdAt: Timestamp | undefined;
  updatedAt: Timestamp | undefined;
}

export const AUTH1_PACKAGE_NAME = "auth1";

export interface AuthServiceClient {
  /** Authentication */

  login(request: LoginRequest): Observable<LoginResponse>;

  refreshToken(request: RefreshTokenRequest): Observable<RefreshTokenResponse>;

  validateToken(request: ValidateTokenRequest): Observable<ValidateTokenResponse>;

  logout(request: LogoutRequest): Observable<LogoutResponse>;

  /** User Management */

  createUser(request: CreateUserRequest): Observable<CreateUserResponse>;

  getUser(request: GetUserRequest): Observable<GetUserResponse>;

  updateUser(request: UpdateUserRequest): Observable<UpdateUserResponse>;

  deleteUser(request: DeleteUserRequest): Observable<DeleteUserResponse>;

  listUsers(request: ListUsersRequest): Observable<ListUsersResponse>;

  /** Role Management */

  createRole(request: CreateRoleRequest): Observable<CreateRoleResponse>;

  listRoles(request: ListRolesRequest): Observable<ListRolesResponse>;

  updateRole(request: UpdateRoleRequest): Observable<UpdateRoleResponse>;

  deleteRole(request: DeleteRoleRequest): Observable<DeleteRoleResponse>;

  /** Permission Management */

  listPermissions(request: ListPermissionsRequest): Observable<ListPermissionsResponse>;

  addUserRole(request: AddUserRoleRequest): Observable<AddUserRoleResponse>;

  removeUserRole(request: RemoveUserRoleRequest): Observable<RemoveUserRoleResponse>;

  addUserPermission(request: AddUserPermissionRequest): Observable<AddUserPermissionResponse>;

  removeUserPermission(request: RemoveUserPermissionRequest): Observable<RemoveUserPermissionResponse>;

  /** Authorization */

  checkPermission(request: CheckPermissionRequest): Observable<CheckPermissionResponse>;

  getUserPermissions(request: GetUserPermissionsRequest): Observable<GetUserPermissionsResponse>;

  getUserRoles(request: GetUserRolesRequest): Observable<GetUserRolesResponse>;
}

export interface AuthServiceController {
  /** Authentication */

  login(request: LoginRequest): Promise<LoginResponse> | Observable<LoginResponse> | LoginResponse;

  refreshToken(
    request: RefreshTokenRequest,
  ): Promise<RefreshTokenResponse> | Observable<RefreshTokenResponse> | RefreshTokenResponse;

  validateToken(
    request: ValidateTokenRequest,
  ): Promise<ValidateTokenResponse> | Observable<ValidateTokenResponse> | ValidateTokenResponse;

  logout(request: LogoutRequest): Promise<LogoutResponse> | Observable<LogoutResponse> | LogoutResponse;

  /** User Management */

  createUser(
    request: CreateUserRequest,
  ): Promise<CreateUserResponse> | Observable<CreateUserResponse> | CreateUserResponse;

  getUser(request: GetUserRequest): Promise<GetUserResponse> | Observable<GetUserResponse> | GetUserResponse;

  updateUser(
    request: UpdateUserRequest,
  ): Promise<UpdateUserResponse> | Observable<UpdateUserResponse> | UpdateUserResponse;

  deleteUser(
    request: DeleteUserRequest,
  ): Promise<DeleteUserResponse> | Observable<DeleteUserResponse> | DeleteUserResponse;

  listUsers(request: ListUsersRequest): Promise<ListUsersResponse> | Observable<ListUsersResponse> | ListUsersResponse;

  /** Role Management */

  createRole(
    request: CreateRoleRequest,
  ): Promise<CreateRoleResponse> | Observable<CreateRoleResponse> | CreateRoleResponse;

  listRoles(request: ListRolesRequest): Promise<ListRolesResponse> | Observable<ListRolesResponse> | ListRolesResponse;

  updateRole(
    request: UpdateRoleRequest,
  ): Promise<UpdateRoleResponse> | Observable<UpdateRoleResponse> | UpdateRoleResponse;

  deleteRole(
    request: DeleteRoleRequest,
  ): Promise<DeleteRoleResponse> | Observable<DeleteRoleResponse> | DeleteRoleResponse;

  /** Permission Management */

  listPermissions(
    request: ListPermissionsRequest,
  ): Promise<ListPermissionsResponse> | Observable<ListPermissionsResponse> | ListPermissionsResponse;

  addUserRole(
    request: AddUserRoleRequest,
  ): Promise<AddUserRoleResponse> | Observable<AddUserRoleResponse> | AddUserRoleResponse;

  removeUserRole(
    request: RemoveUserRoleRequest,
  ): Promise<RemoveUserRoleResponse> | Observable<RemoveUserRoleResponse> | RemoveUserRoleResponse;

  addUserPermission(
    request: AddUserPermissionRequest,
  ): Promise<AddUserPermissionResponse> | Observable<AddUserPermissionResponse> | AddUserPermissionResponse;

  removeUserPermission(
    request: RemoveUserPermissionRequest,
  ): Promise<RemoveUserPermissionResponse> | Observable<RemoveUserPermissionResponse> | RemoveUserPermissionResponse;

  /** Authorization */

  checkPermission(
    request: CheckPermissionRequest,
  ): Promise<CheckPermissionResponse> | Observable<CheckPermissionResponse> | CheckPermissionResponse;

  getUserPermissions(
    request: GetUserPermissionsRequest,
  ): Promise<GetUserPermissionsResponse> | Observable<GetUserPermissionsResponse> | GetUserPermissionsResponse;

  getUserRoles(
    request: GetUserRolesRequest,
  ): Promise<GetUserRolesResponse> | Observable<GetUserRolesResponse> | GetUserRolesResponse;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "login",
      "refreshToken",
      "validateToken",
      "logout",
      "createUser",
      "getUser",
      "updateUser",
      "deleteUser",
      "listUsers",
      "createRole",
      "listRoles",
      "updateRole",
      "deleteRole",
      "listPermissions",
      "addUserRole",
      "removeUserRole",
      "addUserPermission",
      "removeUserPermission",
      "checkPermission",
      "getUserPermissions",
      "getUserRoles",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
